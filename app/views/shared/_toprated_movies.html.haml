- if !current_user.blank?
  %input{:type => 'hidden', :name=> 'logged_in_user_id' , :id => 'logged_in_user_id', :value => current_user.id}
  - @my_wanna_see_movies = []
  - @my_seen_movies = []
  - list = ListOfMovie.find_by_user_id(current_user.id)
  - if list && !list.wanna_see_lists.blank?
    - wannasee_list = ActiveSupport::JSON.decode(list.wanna_see_lists)
    - wannasee_list.each do |wanna_see|
      - @my_wanna_see_movies << wanna_see["object"]["id"].to_i
  - if list && !list.seen_lists.blank?
    - seen_list = ActiveSupport::JSON.decode(list.seen_lists)
    - seen_list.each do |seen|
      - unless seen["object"].blank?
        - @my_seen_movies << seen["object"]["id"].to_i
  - @my_rated_movies = []
  - rated =  UserMovieList.where(:user_id => current_user.id)
  - if rated
    - rated.each do |rate|
      - if !rate.movie_id.blank?
        - rated_list = ActiveSupport::JSON.decode(rate.movie_id)
        - rated_list.each do |movie|
          - @my_rated_movies << movie.to_i
  - @my_rated_movies.uniq!

-unless @top_rated_movies.blank?
  -@subs = ""
  -unless current_user.blank?
    -@subscription = UserSubscriptions.find(:first, :conditions => ["user_id = #{current_user.id} AND end_date > '#{Date.today}' AND agent='muvi'"])
    -unless @subscription.blank?
      -@subs = 1
    -else
      -@subs = 0

  -@top_rated_movies.each do |top_movie|
    .clear
    =render :partial => "shared/movie_block", :locals=>{:movie=>top_movie,:type=>"top_rated", :subs => @subs}
